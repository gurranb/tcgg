// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCGGAPI.Data;

#nullable disable

namespace TCGGAPI.Migrations
{
    [DbContext(typeof(TCGGDBContext))]
    partial class TCGGDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TCGGAPI.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Player1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Player2Id")
                        .HasColumnType("int");

                    b.Property<int>("Turns")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TCGGAPI.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int?>("BoardId")
                        .HasColumnType("int");

                    b.Property<int?>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("DeckId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 1,
                            Health = 1,
                            Name = "Human"
                        },
                        new
                        {
                            Id = 2,
                            Attack = 1,
                            Health = 2,
                            Name = "Beast"
                        },
                        new
                        {
                            Id = 3,
                            Attack = 2,
                            Health = 1,
                            Name = "Elf"
                        });
                });

            modelBuilder.Entity("TCGGAPI.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("TCGGAPI.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TCGGAPI.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CurrentTurn")
                        .HasColumnType("bit");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("MatchDeckId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("MatchDeckId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TCGGAPI.Models.PlayerCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInHand")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnBoard")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerCards");
                });

            modelBuilder.Entity("TCGGAPI.Models.Board", b =>
                {
                    b.HasOne("TCGGAPI.Models.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TCGGAPI.Models.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Player1");

                    b.Navigation("Player2");
                });

            modelBuilder.Entity("TCGGAPI.Models.Card", b =>
                {
                    b.HasOne("TCGGAPI.Models.Board", null)
                        .WithMany("CombatZone")
                        .HasForeignKey("BoardId");

                    b.HasOne("TCGGAPI.Models.Deck", null)
                        .WithMany("Cards")
                        .HasForeignKey("DeckId");
                });

            modelBuilder.Entity("TCGGAPI.Models.Deck", b =>
                {
                    b.HasOne("TCGGAPI.Models.Player", null)
                        .WithMany("Decks")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("TCGGAPI.Models.Match", b =>
                {
                    b.HasOne("TCGGAPI.Models.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TCGGAPI.Models.Player", b =>
                {
                    b.HasOne("TCGGAPI.Models.Deck", "MatchDeck")
                        .WithMany()
                        .HasForeignKey("MatchDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchDeck");
                });

            modelBuilder.Entity("TCGGAPI.Models.PlayerCard", b =>
                {
                    b.HasOne("TCGGAPI.Models.Card", "Card")
                        .WithMany("PlayerCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGGAPI.Models.Player", "Player")
                        .WithMany("PlayerCards")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TCGGAPI.Models.Board", b =>
                {
                    b.Navigation("CombatZone");
                });

            modelBuilder.Entity("TCGGAPI.Models.Card", b =>
                {
                    b.Navigation("PlayerCards");
                });

            modelBuilder.Entity("TCGGAPI.Models.Deck", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("TCGGAPI.Models.Player", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("PlayerCards");
                });
#pragma warning restore 612, 618
        }
    }
}
